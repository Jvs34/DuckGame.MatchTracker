
<div class="card" style="width: 320px; height: 180px">
    <div class="card-header">
        @roundName
    </div>
    <img class="card-img-top" src=@GetImage() alt=@roundName title=@roundName />
    <div class="card-img-overlay text-right">
        <h5 class="card-title"><font color="white" >@GetDuration()</font></h5>
    </div>
</div>

@functions
{
    [Parameter]
    String roundName { get; set; }

    //this delay will increase when a new roundelement requests data and decrease when it's done
    private static int qRequests = 0;

    public static int QueuedRequests
    {
        get
        {
            return qRequests;
        }

        set
        {
            if( value <= 0 )
            {
                value = 0;
            }
            qRequests = value;
        }
    }

    //set once it's done loading the data
    private RoundData roundData;

    String GetImage()
    {
        if( roundData != null && roundData.youtubeUrl != null )
        {
            return string.Format( "https://img.youtube.com/vi/{0}/mqdefault.jpg" , roundData.youtubeUrl );
        }
        return "missingvideo.png";
    }

    String GetDuration()
    {
        TimeSpan duration = new TimeSpan( 0 , 0 , 0 , 0 , 0 );

        if( roundData != null )
        {
            duration = roundData.GetDuration();
        }

        return duration.ToString( "mm':'ss" );
    }


    protected override async Task OnParametersSetAsync()
    {

        if( roundName == "" )
        {
            return;
        }

        QueuedRequests++;

        //test with a fake delay for now
        Console.WriteLine( "Delaying for {0} milliseconds" , QueuedRequests * 200 );
        await Task.Delay( TimeSpan.FromMilliseconds( QueuedRequests * 200 ) );

        roundData = await MatchDatabase.GetRoundData( roundName );

        QueuedRequests--;
    }
}

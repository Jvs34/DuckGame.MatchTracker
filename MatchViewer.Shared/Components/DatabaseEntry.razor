@typeparam TItem where TItem: IDatabaseEntry
@inject IGameDatabase Database

<MudCard Width="350px">
	<MudCardHeader>
		<CardHeaderContent>
			<MudText Typo="Typo.h6">
				<p>@EntryIndex</p>
			</MudText>
		</CardHeaderContent>
		<CardHeaderActions>
			<MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default" />
		</CardHeaderActions>
	</MudCardHeader>
	<MudCardContent>
		<MudText>
			test
		</MudText>
		<MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
	</MudCardContent>
	<MudCardActions>
		@if( Entry is not null && Entry is IPlayersList players )
		{
			<MudTooltip>
				<ChildContent>
					<MudBadge Content="@players.Players.Count" Overlap="true">
						<MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Default" />
					</MudBadge>
				</ChildContent>
				<TooltipContent>
					<PlayersTooltip PlayerIndexes="@players.Players" />
				</TooltipContent>
			</MudTooltip>
		}
	</MudCardActions>
</MudCard>

@code {
	//<MudCardMedia Image="images/pilars.jpg" Height="250" />
	[Parameter]
	public string? EntryIndex { get; set; }

	public TItem? Entry { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if( Database is null )
		{
			return;
		}

		if( !string.IsNullOrEmpty( EntryIndex ) )
		{
			Entry = await Database.GetData<TItem>( EntryIndex );
		}
	}
}

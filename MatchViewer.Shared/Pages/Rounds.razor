@page "/rounds"
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject IGameDatabase Database


<MudGrid SSpacing="1" Justify="Justify.FlexStart">
	@foreach( var item in GetPageItems( CurrentPage ) )
	{
		<MudItem>
			<DatabaseEntry @key="item" EntryIndex="@item" TItem="RoundData"></DatabaseEntry>
		</MudItem>
	}
</MudGrid>

<MudPagination Color="Color.Primary"
			   Count="@MaxPages"
@bind-Selected="CurrentPage"
			   ShowLastButton="true"
			   ShowFirstButton="true" />

@code {

	private List<string> Indexes { get; set; } = new();

	private int ItemsPerPage = 50;
	private int MaxPages = 1;
	private int CurrentPage = 0;

	protected override async Task OnInitializedAsync()
	{
		if( !Database.IsLoaded )
		{
			return;
		}

		Indexes = await Database.GetAllIndexes<RoundData>();
		MaxPages = (int) Math.Ceiling( (double) Indexes.Count / (double) ItemsPerPage );
	}

	private IEnumerable<string> GetPageItems( int page = 0 )
	{
		int currentItems = 0;
		var skippedEnumerable = Indexes.Skip( ItemsPerPage * page );
		foreach( var item in skippedEnumerable )
		{
			if( currentItems >= ItemsPerPage )
			{
				break;
			}
			currentItems++;
			yield return item;
		}
	}
}